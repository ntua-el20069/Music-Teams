name: backend tests Pipeline

on:
  push:
    branches: [ main, nikos-dev ]
  pull_request:
    branches: [ main, nikos-dev ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Start Services
        working-directory: .
        run: |
          cat backend/env_template > backend/.env  # Copy template to .env
          cat backend/db_password_template.txt > backend/db_password.txt  # Copy password template
          docker compose build
          docker compose up -d

          # Wait for services to be ready
          # Wait for services using Python requests
          docker compose run --rm fastapi-app python -c "
          import requests
          import time
          for _ in range(100):
              try:
                  res_status_code = requests.get('http://fastapi-app:8000/').status_code
                  print(f'FastAPI service status code: {res_status_code}')
                  if res_status_code == 200:
                      break
              except:
                  print('Waiting for FastAPI service...')
                  time.sleep(1)
          else:
              raise Exception('Service not ready after 30 seconds')
          "
      - name: Initialize Database with admin user
        working-directory: .
        run: |
          docker compose run --rm fastapi-app python -c "
          import requests
          try:
              res = requests.get('http://fastapi-app:8000/init-db/create-admin').status_code
              print(f'Initialization response status code: {res}')
              if res == 200:
                  print('Database initialized successfully')
              else :
                  print(f'Initialization failed with detail: {res.detail}')
          except Exception as e:
              print(f'Error during initialization: {e}')
              raise
          "
          
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest pytest-cov

      - name: Run Backend Tests
        working-directory: ./backend
        env:
          PYTHONPATH: ${{ github.workspace }}
          MODE: "CONTAINER"  # Set mode for containerized tests
        run: |
          pytest --cov=./ --cov-report=xml

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml

      - name: Stop Services
        working-directory: .
        if: always()  # Run even if previous steps fail
        run: |
          docker compose down
          rm -f backend/.env backend/db_password.txt  # Clean up sensitive files